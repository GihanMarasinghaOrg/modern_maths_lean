.. _tactics:

Tactics
=======


.. dropdown:: show

  ``show`` is used to state or rephrase the current target of the proof.
  If the current target is to prove ``x + y = x + y``, you can indicate this by typing

  .. code-block:: lean

      show x + y = x + y

  More practically, ``show`` can be used to transform the target to a definitionally equal
  target. For example, if ``f : A → B`` is a function and the target is to show
  ``surjective f``, then the target can be changed to the (definitionally equal) target

  ``∀ (b : B), ∃ (a : A), f(a) = b``
  
  via

  .. code-block:: lean

    show ∀ (b : B), ∃ (a : A), f(a) = b


.. dropdown:: norm_num
  
  ``norm_num`` proves many numeric equations and inequalities involving addition, subtraction,
  multiplication, division, exponentiation, and congruences.

  .. code-block:: lean

    example : 2 < 3 * 6 := by norm_num

    example : 5 + 10 = 15 := by norm_num

    example : 9 ≠ 4 := by norm_num

    -- Show `12` is congruent to `2` modulo `10`.
    example : 12 % 10 = 2 := by norm_num

    -- Show that `163` is prime.
    example : nat.prime 163 := by norm_num


.. admonition:: show
  :class: dropdown 
  
  ``show`` is used to state or rephrase the current target of the proof.
  If the current target is to prove ``x + y = x + y``, you can indicate this by typing

  .. code-block:: lean

      show x + y = x + y

  More practically, ``show`` can be used to transform the target to a definitionally equal
  target. For example, if ``f : A → B`` is a function and the target is to show
  ``surjective f``, then the target can be changed to the (definitionally equal) target

  ``∀ (b : B), ∃ (a : A), f(a) = b``
  
  via

  .. code-block:: lean

    show ∀ (b : B), ∃ (a : A), f(a) = b
